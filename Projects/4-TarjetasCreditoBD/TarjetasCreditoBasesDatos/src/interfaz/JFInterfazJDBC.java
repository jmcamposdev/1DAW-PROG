package interfaz;

import JDBC.TarjetaCreditoDAO;
import modelo.ModeloListaMovimientos;
import modelo.ModeloListaTarjetasCredito;
import modelo.Movimiento;
import modelo.TarjetaCredito;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author josemaria
 */
public class JFInterfazJDBC extends javax.swing.JFrame {

    /**
     * Creates new form JFInterfaz
     */
    public JFInterfazJDBC() {
        initComponents();
        inicializar();
    }

    /**
     * Método privado el cual inicializa toda la interfaz, crea los modelos de los
     * JTable (Tarjeta y Movimientos) Carga todas las tarjetas de la BBDD a
     * través de JDBC
     */
    private void inicializar() {
        // Intentamos crear la conexión con la BBDD
        try {
            this.conexionTarjetaCreditoDAO = new TarjetaCreditoDAO();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "No se ha podido conectar con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Creamos el Modelo de la Lista de Tarjetas
        modeloTarjetasCredito = new ModeloListaTarjetasCredito();
        // Actualizamos JTable para que use el Modelo de Tarjetas de Credito
        jtListaTarjetasCredito.setModel(modeloTarjetasCredito);

        if (conexionTarjetaCreditoDAO != null) { // Si la conexión con la BBDD no es nula pedimos las tarjetas
            try { // Intentamos cargar las tarjetas de la BBDD
                this.listaTarjetas = (ArrayList<TarjetaCredito>) conexionTarjetaCreditoDAO.readAll(); // Cargamos todas las Tarjetas de la BBDD
            } catch (SQLException ex) { // Si ocurre algún error se lo mostramos al usuario
                JOptionPane.showMessageDialog(this, "No se ha podido conectar con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            actualizarListaTarjeta(); // Actualizamos el JTable
        }

        this.tarjetaSeleccionada = null; // Inicializamos la tarjetaSeleccionada a null

        // Creamos el Modelo de la Lista de Movimientos
        modeloMovimientos = new ModeloListaMovimientos();
        // Actualizamos JTable para que use el Modelo de Movimientos
        jtListaMovimientos.setModel(modeloMovimientos);
        // Permitimos que él se pueda ordenar la Tabla movimientos
        jtListaMovimientos.setAutoCreateRowSorter(true);

        jtpTarjetaSeleccionada.setVisible(false); // Ocultamos el JTabbedPane
        jlEstadoSeleccion.setText("No se ha seleccionado ninguna Tarjeta");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpmOpcionTarjeta = new javax.swing.JPopupMenu();
        jmiPopupEliminarTarjeta = new javax.swing.JMenuItem();
        jmiPopupModificarPIN = new javax.swing.JMenuItem();
        jmiPopupRealizarPago = new javax.swing.JMenuItem();
        jpmEliminarMultiplesTarjetas = new javax.swing.JPopupMenu();
        jmiPopupEliminarMultiplesTarjetas = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtListaTarjetasCredito = new javax.swing.JTable();
        jlTituloTarjetaSeleccionada = new javax.swing.JLabel();
        jtpTarjetaSeleccionada = new javax.swing.JTabbedPane();
        jpInformacion = new javax.swing.JPanel();
        jlFechaCaducidad = new javax.swing.JLabel();
        jlGastosTotales = new javax.swing.JLabel();
        jlTituloNumeroTarjeta = new javax.swing.JLabel();
        jlTituloTitular = new javax.swing.JLabel();
        jlTituloFechaCaducidad = new javax.swing.JLabel();
        jlTituloGastosTotales = new javax.swing.JLabel();
        jlNumeroTarjeta = new javax.swing.JLabel();
        jlTitular = new javax.swing.JLabel();
        jbModificarPIN = new javax.swing.JButton();
        jbRealizarPago = new javax.swing.JButton();
        jbEliminarTarjetaSeleccionada = new javax.swing.JButton();
        jlTituloFechaCaducidad1 = new javax.swing.JLabel();
        jlNIF = new javax.swing.JLabel();
        jpMovimientos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtListaMovimientos = new javax.swing.JTable();
        jlEstadoSeleccion = new javax.swing.JLabel();
        jbAñadirTarjeta = new javax.swing.JButton();
        jmbMenu = new javax.swing.JMenuBar();
        jmCrear = new javax.swing.JMenu();
        jmiAñadirTarjeta = new javax.swing.JMenuItem();
        jmAcciones = new javax.swing.JMenu();
        jmiEliminarTarjeta = new javax.swing.JMenuItem();
        jmiModificarPIN = new javax.swing.JMenuItem();
        jmiRealizarPago = new javax.swing.JMenuItem();

        jmiPopupEliminarTarjeta.setText("Eliminar");
        jmiPopupEliminarTarjeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPopupEliminarTarjetaActionPerformed(evt);
            }
        });
        jpmOpcionTarjeta.add(jmiPopupEliminarTarjeta);

        jmiPopupModificarPIN.setText("Modificar PIN");
        jmiPopupModificarPIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPopupModificarPINActionPerformed(evt);
            }
        });
        jpmOpcionTarjeta.add(jmiPopupModificarPIN);

        jmiPopupRealizarPago.setText("Realizar Pago");
        jmiPopupRealizarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPopupRealizarPagoActionPerformed(evt);
            }
        });
        jpmOpcionTarjeta.add(jmiPopupRealizarPago);

        jmiPopupEliminarMultiplesTarjetas.setText("Eliminar Tarjetas");
        jmiPopupEliminarMultiplesTarjetas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPopupEliminarMultiplesTarjetasActionPerformed(evt);
            }
        });
        jpmEliminarMultiplesTarjetas.add(jmiPopupEliminarMultiplesTarjetas);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtListaTarjetasCredito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtListaTarjetasCredito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtListaTarjetasCreditoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtListaTarjetasCredito);

        jlTituloTarjetaSeleccionada.setText("Tarjeta Seleccionada:");

        jpInformacion.setToolTipText("");

        jlFechaCaducidad.setText("Fecha");

        jlGastosTotales.setText("Total");

        jlTituloNumeroTarjeta.setText("Número Tarjeta:");

        jlTituloTitular.setText("Titular:");

        jlTituloFechaCaducidad.setText("Fecha Caducidad:");

        jlTituloGastosTotales.setText("Gastos Totales:");

        jlNumeroTarjeta.setText("Tarjeta");

        jlTitular.setText("Nombre");

        jbModificarPIN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/modify.png"))); // NOI18N
        jbModificarPIN.setText("Modificar PIN");
        jbModificarPIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarPINActionPerformed(evt);
            }
        });

        jbRealizarPago.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/import.png"))); // NOI18N
        jbRealizarPago.setText("Realizar Pago");
        jbRealizarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRealizarPagoActionPerformed(evt);
            }
        });

        jbEliminarTarjetaSeleccionada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        jbEliminarTarjetaSeleccionada.setText("Eliminar");
        jbEliminarTarjetaSeleccionada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarTarjetaSeleccionadaActionPerformed(evt);
            }
        });

        jlTituloFechaCaducidad1.setText("NIF:");

        jlNIF.setText("Nif");

        javax.swing.GroupLayout jpInformacionLayout = new javax.swing.GroupLayout(jpInformacion);
        jpInformacion.setLayout(jpInformacionLayout);
        jpInformacionLayout.setHorizontalGroup(
            jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionLayout.createSequentialGroup()
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpInformacionLayout.createSequentialGroup()
                        .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpInformacionLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jlTituloNumeroTarjeta)
                                    .addComponent(jlTituloFechaCaducidad1)
                                    .addComponent(jlTituloFechaCaducidad)
                                    .addComponent(jlTituloTitular)
                                    .addComponent(jlTituloGastosTotales)))
                            .addGroup(jpInformacionLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jbModificarPIN)))
                        .addGap(18, 18, 18)
                        .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlTitular)
                            .addComponent(jlNumeroTarjeta)
                            .addComponent(jlNIF)
                            .addComponent(jlFechaCaducidad)
                            .addComponent(jlGastosTotales))
                        .addGap(0, 137, Short.MAX_VALUE))
                    .addGroup(jpInformacionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbRealizarPago)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbEliminarTarjetaSeleccionada)))
                .addContainerGap())
        );
        jpInformacionLayout.setVerticalGroup(
            jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpInformacionLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloNumeroTarjeta)
                    .addComponent(jlNumeroTarjeta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloTitular)
                    .addComponent(jlTitular))
                .addGap(12, 12, 12)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloFechaCaducidad1)
                    .addComponent(jlNIF))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloFechaCaducidad)
                    .addComponent(jlFechaCaducidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloGastosTotales)
                    .addComponent(jlGastosTotales))
                .addGap(18, 18, 18)
                .addComponent(jbModificarPIN)
                .addGap(18, 18, 18)
                .addGroup(jpInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbRealizarPago)
                    .addComponent(jbEliminarTarjetaSeleccionada)))
        );

        jtpTarjetaSeleccionada.addTab("Información", jpInformacion);

        jtListaMovimientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtListaMovimientos);

        javax.swing.GroupLayout jpMovimientosLayout = new javax.swing.GroupLayout(jpMovimientos);
        jpMovimientos.setLayout(jpMovimientosLayout);
        jpMovimientosLayout.setHorizontalGroup(
            jpMovimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMovimientosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpMovimientosLayout.setVerticalGroup(
            jpMovimientosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMovimientosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jtpTarjetaSeleccionada.addTab("Movimientos", jpMovimientos);

        jlEstadoSeleccion.setText(" ");

        jbAñadirTarjeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        jbAñadirTarjeta.setText("Añadir Tarjeta");
        jbAñadirTarjeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAñadirTarjetaActionPerformed(evt);
            }
        });

        jmCrear.setMnemonic('C');
        jmCrear.setText("Crear");

        jmiAñadirTarjeta.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        jmiAñadirTarjeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        jmiAñadirTarjeta.setMnemonic('C');
        jmiAñadirTarjeta.setText("Añadir Tarjeta");
        jmiAñadirTarjeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAñadirTarjetaActionPerformed(evt);
            }
        });
        jmCrear.add(jmiAñadirTarjeta);

        jmbMenu.add(jmCrear);

        jmAcciones.setMnemonic('A');
        jmAcciones.setText("Acciones");

        jmiEliminarTarjeta.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_D, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        jmiEliminarTarjeta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete.png"))); // NOI18N
        jmiEliminarTarjeta.setText("Eliminar Tarjeta");
        jmiEliminarTarjeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEliminarTarjetaActionPerformed(evt);
            }
        });
        jmAcciones.add(jmiEliminarTarjeta);

        jmiModificarPIN.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        jmiModificarPIN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/modify.png"))); // NOI18N
        jmiModificarPIN.setText("Modificar PIN");
        jmiModificarPIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiModificarPINActionPerformed(evt);
            }
        });
        jmAcciones.add(jmiModificarPIN);

        jmiRealizarPago.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        jmiRealizarPago.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/import.png"))); // NOI18N
        jmiRealizarPago.setText("Realizar Pago");
        jmiRealizarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiRealizarPagoActionPerformed(evt);
            }
        });
        jmAcciones.add(jmiRealizarPago);

        jmbMenu.add(jmAcciones);

        setJMenuBar(jmbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlTituloTarjetaSeleccionada)
                        .addGap(18, 18, 18)
                        .addComponent(jlEstadoSeleccion)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtpTarjetaSeleccionada, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jbAñadirTarjeta)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(60, 60, 60))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbAñadirTarjeta)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTituloTarjetaSeleccionada)
                    .addComponent(jlEstadoSeleccion))
                .addGap(18, 18, 18)
                .addComponent(jtpTarjetaSeleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método que se ejecuta al realizar click a una tarjeta del JTable Muestra
     * un menu si realiza click a una Tarjeta (Eliminar, Realizar Pago,
     * Modificar PIN) Si realiza click derecho sobre varias tarjetas
     * seleccionada muestra (Eliminar Tarjetas) Si realiza doble click a una
     * Tarjeta muestra sus datos en el JTabbedPane
     *
     * @param evt Mouse Event
     */
    private void jtListaTarjetasCreditoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtListaTarjetasCreditoMouseClicked
        int[] columnasSeleccionadas = jtListaTarjetasCredito.getSelectedRows(); // Obtenemos la lista de los índices de las tarjetas seleccionadas
        if (columnasSeleccionadas.length == 1) { // Si selecciona una tarjeta
            if (evt.getButton() == MouseEvent.BUTTON3) { // Si realiza click Derecho
                // Mostramos  el Menú
                jpmOpcionTarjeta.show(jtListaTarjetasCredito, evt.getX(), evt.getY());
            } else { // Si realiza Doble Click
                tarjetaSeleccionada = listaTarjetas.get(columnasSeleccionadas[0]);
                actualizarInformacionTarjeta();
                actualizarListaMovimientos();
                jlEstadoSeleccion.setVisible(false);
                jtpTarjetaSeleccionada.setVisible(true);
            }
        } else if (evt.getButton() == MouseEvent.BUTTON3) {  // Si selecciona varias tarjetas mostramos el menú indicado
            jpmEliminarMultiplesTarjetas.show(jtListaTarjetasCredito, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jtListaTarjetasCreditoMouseClicked

    /**
     * Acción llamada cuando se realiza click en JMenuItem "Añadir Tarjeta"
     * Llama al método añadirTarjetaRecursivo().
     *
     * @param evt Action Event
     */
    private void jmiAñadirTarjetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAñadirTarjetaActionPerformed
        añadirTarjetaRecursivo(null);
    }//GEN-LAST:event_jmiAñadirTarjetaActionPerformed

    /**
     * Acción llamada cuando se realiza click en JButton "Añadir Tarjeta" Llama
     * al método añadirTarjetaRecursivo().
     *
     * @param evt Action Event
     */
    private void jbAñadirTarjetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAñadirTarjetaActionPerformed
        añadirTarjetaRecursivo(null);
    }//GEN-LAST:event_jbAñadirTarjetaActionPerformed

    /**
     * Acción llamada cuando se realiza click en JMenuItem "Eliminar Tarjeta"
     * Llama al método eliminarTarjetas().
     *
     * @param evt Action Event
     */
    private void jmiEliminarTarjetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEliminarTarjetaActionPerformed
        eliminarTarjetas();
    }//GEN-LAST:event_jmiEliminarTarjetaActionPerformed

    /**
     * Acción llamada cuando se realiza click en JPopPupMenuItem "Eliminar
     * Tarjeta" Llama al método eliminarTarjetas().
     *
     * @param evt Action Event
     */
    private void jmiPopupEliminarTarjetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPopupEliminarTarjetaActionPerformed
        eliminarTarjetas();
    }//GEN-LAST:event_jmiPopupEliminarTarjetaActionPerformed

    /**
     * Acción llamada cuando se realiza click en JPopPupMenuItem "Eliminar
     * Tarjetas" Llama al método eliminarTarjetas().
     *
     * @param evt Action Event
     */
    private void jmiPopupEliminarMultiplesTarjetasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPopupEliminarMultiplesTarjetasActionPerformed
        eliminarTarjetas();
    }//GEN-LAST:event_jmiPopupEliminarMultiplesTarjetasActionPerformed

    /**
     * Acción llamada cuando se realiza click en JButton "Eliminar Tarjeta"
     * Llama al método añadirTarjetaRecursivo().
     *
     * @param evt Action Event
     */
    private void jbEliminarTarjetaSeleccionadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarTarjetaSeleccionadaActionPerformed
        eliminarTarjetas();
    }//GEN-LAST:event_jbEliminarTarjetaSeleccionadaActionPerformed

    /**
     * Acción llamada cuando se realiza click en JMenuItem "Modificar PIN" Llama
     * al método modificarPIN().
     *
     * @param evt Action Event
     */
    private void jmiModificarPINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiModificarPINActionPerformed
        modificarPIN();
    }//GEN-LAST:event_jmiModificarPINActionPerformed

    /**
     * Acción llamada cuando se realiza click en JPopPupMenuItem "Modificar PIN"
     * Llama al método modificarPIN().
     *
     * @param evt Action Event
     */
    private void jmiPopupModificarPINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPopupModificarPINActionPerformed
        modificarPIN();
    }//GEN-LAST:event_jmiPopupModificarPINActionPerformed

    /**
     * Acción llamada cuando se realiza click en JButton "Modificar PIN" Llama
     * al método modificarPIN();
     *
     * @param evt Action Event
     */
    private void jbModificarPINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarPINActionPerformed
        modificarPIN();
    }//GEN-LAST:event_jbModificarPINActionPerformed

    /**
     * Acción llamada cuando se realiza click en JMenuItem "Realizar Pago" Llama
     * al método realizarPago().
     *
     * @param evt Action Event
     */
    private void jmiRealizarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiRealizarPagoActionPerformed
        realizarPago();
    }//GEN-LAST:event_jmiRealizarPagoActionPerformed

    /**
     * Acción llamada cuando se realiza click en JPopPupMenuItem "Realizar Pago"
     * Llama al método realizarPago().
     *
     * @param evt Action Event
     */
    private void jmiPopupRealizarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPopupRealizarPagoActionPerformed
        realizarPago();

    }//GEN-LAST:event_jmiPopupRealizarPagoActionPerformed

    /**
     * Acción llamada cuando se realiza click en JButton "Realizar Pago" Llama
     * al método realizarPago();
     *
     * @param evt Action Event
     */
    private void jbRealizarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRealizarPagoActionPerformed
        realizarPago();

    }//GEN-LAST:event_jbRealizarPagoActionPerformed

    /**
     * Método recursivo el cual muestra un JDialog para crear una Tarjeta
     * comprueba que no esté duplicada en caso afirmativo vuelve a mostrar el
     * JDialog con los campos rellenos de los datos del usuario para que los
     * cambie y si no está duplicada se procede a cargarla en la BBDD y en el
     * programa
     *
     * @param tarjetaExistente Tarjeta de Crédito que se cargará en el JDialog
     * pasar null para mostrar el JDialog sin datos.
     */
    private void añadirTarjetaRecursivo(TarjetaCredito tarjetaExistente) {
        // Creamos el JDialog Crear Tarjeta
        JDCrearTarjeta jDCrearTarjeta = new JDCrearTarjeta(this, true);

        if (tarjetaExistente != null) { // Si no es nulo
            // Cargar los datos de la tarjeta duplicada en el JDialog
            jDCrearTarjeta.cargarDatosTarjeta(tarjetaExistente);
        }

        jDCrearTarjeta.setVisible(true); // Mostramos el JDialog

        if (jDCrearTarjeta.isCreada()) { // Si ha pulsado en "Crear" en el JDialog
            TarjetaCredito nuevaTarjeta = jDCrearTarjeta.getTarjetaCredito(); // Obtenemos la Nueva Tarjeta

            if (listaTarjetas.contains(nuevaTarjeta)) { // Si ya existe otra tarjeta con el mismo número
                // Mostramos mensaje de Error y volvemos a llamar a añadirTarjetaRecursivo al pasarle la nueva tarjeta (duplicada)
                // Se carga en el JDialog y el usuario vuelve a ver los datos para que los cambie
                JOptionPane.showMessageDialog(this, "Ya existe otra Tarjeta con el mismo Número");
                añadirTarjetaRecursivo(nuevaTarjeta); // Llamada recursiva para volver a intentar añadir la tarjeta
            } else { // Si la tarjeta no está duplicada
                // Añadimos la tarjeta a la BBDD, lista y JTable
                try {
                    conexionTarjetaCreditoDAO.insert(nuevaTarjeta);
                    listaTarjetas.add(nuevaTarjeta);
                    modeloTarjetasCredito.añadirTarjeta(nuevaTarjeta);
                    JOptionPane.showMessageDialog(this, "Se ha creado la Tarjeta Exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "No se ha podido conectar con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    /**
     * Método privado el cual elimina una o varias tarjetas seleccionadas. Si el
     * usuario ha seleccionado una tarjeta o tiene seleccionado una se eliminará
     * y si tiene multiples tarjetas seleccionadas se eliminarán todas las
     * seleccionadas. Antes de realizar la eliminación se pide al usuario
     * confirmación de la Acción. Si la confirma se procede a eliminar las
     * tarjetas
     */
    private void eliminarTarjetas() {
        int[] indices = jtListaTarjetasCredito.getSelectedRows();
        if (indices.length == 0 && tarjetaSeleccionada == null) { // Si no ha seleccionado ninguna tarjeta
            JOptionPane.showMessageDialog(this, "No has seleccionado ninguna tarjeta", "Error", JOptionPane.WARNING_MESSAGE);
        } else { // Si ha seleccionado alguna tarjeta
            if (indices.length == 0 && tarjetaSeleccionada != null) {
                indices = Arrays.copyOf(indices, 1);
                indices[0] = this.listaTarjetas.indexOf(tarjetaSeleccionada);
            }
            // Mostramos mensaje de confirmación
            String message = indices.length > 1 ? "Deseas eliminar las tarjetas" : "Deseas eliminar la tarjeta.";
            int option = JOptionPane.showConfirmDialog(this, message, "Eliminar", JOptionPane.YES_NO_CANCEL_OPTION);

            if (option == JOptionPane.OK_OPTION) { // Si realiza la confirmación
                if (indices.length == 1) { // Si es una sola tarjeta
                    tarjetaSeleccionada = listaTarjetas.get(indices[0]); // Obtenemos la tarjeta
                    try { // Borramos la Tarjeta de la BBDD, la lista y del JTable de Tarjetas
                        conexionTarjetaCreditoDAO.delete(tarjetaSeleccionada);
                        listaTarjetas.remove(tarjetaSeleccionada);
                        this.modeloTarjetasCredito.eliminarTarjeta(tarjetaSeleccionada);
                        JOptionPane.showMessageDialog(this, "Se ha eliminado la Tarjeta Exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "No se ha podido conectar con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else { // Si ha seleccionado varias tarjetas
                    ArrayList<TarjetaCredito> tarjetasAEliminar = new ArrayList<>(); // Array con las tarjetas a eliminar

                    for (int index : indices) { // Obtenemos todas las tarjetas a eliminar
                        tarjetasAEliminar.add(listaTarjetas.get(index));
                    }
                    // Eliminamos las tarjetas de la lista y del Modelo
                    try {
                        this.conexionTarjetaCreditoDAO.delete(tarjetasAEliminar);
                        this.listaTarjetas.removeAll(tarjetasAEliminar);
                        this.modeloTarjetasCredito.removeAll(tarjetasAEliminar);
                        JOptionPane.showMessageDialog(this, "Se han eliminado " + tarjetasAEliminar.size() + " Tarjetas Exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "No se ha podido conectar con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }

                // Asignamos la Tarjeta Seleccionado a NULL
                tarjetaSeleccionada = null;
                // Ponemos invisible el JTabbedPane
                jtpTarjetaSeleccionada.setVisible(false);
                // Poneos visible la información de que no ha seleccionado ninguna tarjeta
                jlEstadoSeleccion.setVisible(true);
            }
        }
    }

    /**
     * Método privado el cual modifica el PIN de una tarjeta. Si no ha
     * seleccionado ninguna tarjeta o ha seleccionado más de una se le informa
     * al usuario. Si tiene seleccionada una le pedimos el PIN de la tarjeta
     * seleccionada para posteriormente actualizar el PIN por el nuevo
     * introducido. El PIN debe de tener 4 dígitos. Si introduce mal el PIN se
     * le informa y si esta más formato también. Si cancela la operación de
     * modificación se le informa.
     */
    private void modificarPIN() {
        // Obtenemos todos los índices de las tarjetas seleccionadas
        if (validarSiExisteTarjetaSeleccionada() && solicitarAntiguoPIN(tarjetaSeleccionada)) { // Si ha seleccionado una tarjeta y escribe su pin
            String newPin = solicitarNuevoPin(); // Solicitamos el PIN
            if (newPin != null) { // Si el PIN es válido
                // Actualizamos la lista, JTable, BBDD y el JLabel - Mostramos mensaje de Éxito
                tarjetaSeleccionada.setPin(newPin);
                try {
                    conexionTarjetaCreditoDAO.update(tarjetaSeleccionada);
                    JOptionPane.showMessageDialog(rootPane, "Se ha actualizado el PIN correctamente.");
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "No se ha podido conectar con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se ha actualizado tu PIN", "INFO", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    /**
     * Método privado para realizar un Pago a una Tarjeta. Primero se valida que
     * exista una tarjeta seleccionada si no ha seleccionado ninguna o ha
     * seleccionado mas de una se le informa al usuario para que seleccione una.
     * Se le pide el PIN de la tarjeta por seguridad una vez introducido Se
     * muestra un JOptionPane para que inserte el Concepto y la Cantidad El
     * concepto no debe de poseer mas de 50 caracteres, Y la cantidad debe de
     * ser inferior o igual a la cantidad disponible de la tarjeta. Si todo es
     * correcto se realiza el pago y se añade el movimiento a la BBDD
     */
    private void realizarPago() {
        // Obtenemos todos los índices de las tarjetas seleccionadas
        if (validarSiExisteTarjetaSeleccionada() && solicitarAntiguoPIN(tarjetaSeleccionada)) {
            JTextField jtfConcepto = new JTextField(); // Creamos un JTextField de Concepto
            // Creamos un Format para JFormattedTextField el cual permite dos decimales como máximo 
            NumberFormat format = DecimalFormat.getInstance();
            format.setMinimumFractionDigits(0);
            format.setMaximumFractionDigits(2);
            JFormattedTextField jftfCantidad = new JFormattedTextField(format);
            // Creamos el Array el cual el usuario rellenará
            Object[] message = {
                "Concepto:", jtfConcepto,
                "Cantidad:", jftfCantidad
            };
            boolean exit = false;
            boolean pagoValido = false;
            String concepto = "";
            String cantidad = "";

            do {
                // Mostramos el JOptionPane para que rellene el pago
                int option = JOptionPane.showConfirmDialog(this, message, "Realizar Pago", JOptionPane.OK_CANCEL_OPTION);
                if (option == JOptionPane.OK_OPTION) { // Si ha pulsado en Aceptar
                    String errorMessage = "";
                    double saldoDisponible = tarjetaSeleccionada.getLimite() - tarjetaSeleccionada.gastado(); // Calculamos el saldo disponible de la Tarjeta
                    // Obtenemos el Concepto y la Cantidad insertada (Eliminamos los Puntos y reemplazamos las comas por puntos)
                    concepto = jtfConcepto.getText();
                    cantidad = jftfCantidad.getText().replace(".", "").replace(",", ".");

                    if ((errorMessage = validarPago(concepto, cantidad, saldoDisponible)) == null) { // Si el Concepto y la Cantidad son válidos salimos del bucle asignamos como pago Válido
                        pagoValido = true;
                    } else { // Si el Concepto o la Cantidad no ha sido válida le informamos del campo erróneo
                        JOptionPane.showMessageDialog(this, errorMessage, "Error", JOptionPane.WARNING_MESSAGE);
                    }
                } else { // Si no ha pulsado Aceptar salimos
                    exit = true;
                }
            } while (!exit && !pagoValido);

            if (pagoValido) { // Si el pago es Válido (Cantidad y Concepto)
                // Añadimos el Pago (Movimiento) a la BBDD, y a la tarjeta
                boolean pagoRealizado = tarjetaSeleccionada.pagar(Double.parseDouble(cantidad), concepto);
                if (pagoRealizado) {
                    try {
                        conexionTarjetaCreditoDAO.insertMovimiento(new Movimiento(Double.parseDouble(cantidad), concepto), tarjetaSeleccionada);
                        // Actualizamos el JTable de Movimiento para que se refleje el nuevo movimiento 
                        actualizarListaMovimientos();
                        // Actualizamos la Tarjeta para recalcular el Saldo Gastado
                        actualizarListaTarjeta();
                        actualizarGastoTotales(tarjetaSeleccionada);
                        JOptionPane.showMessageDialog(rootPane, "Se ha realizado el pago");
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "No se ha podido conectar con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }

    }

    /**
     * Método para actualizar todo los datos de la Tarjeta del JTabbedPane
     */
    private void actualizarInformacionTarjeta() {
        if (tarjetaSeleccionada != null) {
            jlNumeroTarjeta.setText(tarjetaSeleccionada.getNumeroTarjeta()); // Actualizamos el Número de Tarjeta
            jlTitular.setText(tarjetaSeleccionada.getTitular()); // Actualizamos el Título
            jlNIF.setText(tarjetaSeleccionada.getNif()); // Actualizamos el NIF
            jlFechaCaducidad.setText(tarjetaSeleccionada.getMesCaducidad() + "/" + tarjetaSeleccionada.getAñoCaducidad()); // Actualizamos la Fecha de Caducidad (mes/año)
            actualizarGastoTotales(tarjetaSeleccionada); // Actualizamos los Gastos Totales
        }
    }

    /**
     * Método para actualizar los gastos totales de la tarjeta pasada por
     * parámetro, actualiza el JLabel del JTabbedPane
     * @param tarjetaSeleccionada Objeto Tarjeta para obtener los gastos totales
     */
    private void actualizarGastoTotales(TarjetaCredito tarjetaSeleccionada) {
        double totalGastado = (Math.round(tarjetaSeleccionada.gastado() * 100.0) / 100.0);
        jlGastosTotales.setText(totalGastado + " de " + tarjetaSeleccionada.getLimite());
    }

    /**
     * Método para actualizar el Modelo del JTable de Tarjetas Limpia la tabla e
     * inserta todas las tarjetas de la Lista de Tarjetas
     */
    private void actualizarListaTarjeta() {
        modeloTarjetasCredito.clearAll();
        for (TarjetaCredito t : listaTarjetas) {
            modeloTarjetasCredito.añadirTarjeta(t);
        }
    }

    /**
     * Método para actualizar el Modelo del JTable de Movimientos Limpia la
     * tabla e inserta todos los movimientos de la tarjetaSeleccionada
     */
    private void actualizarListaMovimientos() {
        if (tarjetaSeleccionada != null) {
            ArrayList<Movimiento> movimientos = tarjetaSeleccionada.movimientos(tarjetaSeleccionada.numeroMovimientos());
            modeloMovimientos.clearAll();
            for (Movimiento m : movimientos) {
                modeloMovimientos.añadirMovimiento(m);
            }
        }

    }

    /**
     * Método solicita un nuevo PIN al usuario, el PIN 
     * se valida debe de ser 4 dígitos numéricos.
     * @return Devuelve el nuevo PIN y si decide salir devuelve NULL.
     */
    private String solicitarNuevoPin() {
        boolean validPin = false;
        boolean exit = false;
        String newPin;
        do { // Mientras el PIN sea incorrecto
            // Pedimos el nuevo PIN
            newPin = JOptionPane.showInputDialog(this, "Ingresa su nuevo PIN.", "Nuevo PIN", JOptionPane.INFORMATION_MESSAGE);
            if (newPin != null && TarjetaCredito.validarPin(newPin)) { // Si no es Nulo y posee 4 dígitos es válido
                validPin = true;
            } else if (newPin != null) { // Si es distinto a nulo mostrar error 
                JOptionPane.showMessageDialog(this, "El PIN insertado es erróneo debe de contener 4 dígitos");
            } else { // Si ha pulsado el botón cancelar Salimos
                exit = true;
            }
        } while (!validPin && !exit);

        return newPin;
    }

    /**
     * Método que solicita el PIN de la tarjeta pasada por parámetro
     * Valida que el usuario inserte el PIN de la Tarjeta
     * @param tarjeta El Objeto Tarjeta para solicitar el PIN
     * @return Devuelve True si el usuario escribe el PIN correctamente y false en
     * caso de que el usuario cierre el JOptionPane
     */
    private boolean solicitarAntiguoPIN(TarjetaCredito tarjeta) {
        boolean validPIN = false;
        boolean exit = false;
        String userPIN;
        do {
            userPIN = JOptionPane.showInputDialog(this, "Ingresa el PIN de la tarjeta:", "Validar PIN", JOptionPane.INFORMATION_MESSAGE);
            if (userPIN != null && userPIN.equals(tarjeta.getPin())) {
                validPIN = true;
            } else if (userPIN != null) { // Si es distinto a nulo mostrar error 
                JOptionPane.showMessageDialog(this, "El PIN insertado no es correcto");
            } else { // Si ha pulsado el botón cancelar Salimos
                exit = true;
            }
        } while (!validPIN && !exit);

        return validPIN;
    }

    /**
     * Método que valida si el pago se puede efectuar,
     * - Concepto: Debe no puede estar vacío y no puede sobrepasar los 50 caracteres
     * - Cantidad: Debe de ser un valor positivo y menor al saldo disponible
     * @param concepto Concepto del Movimiento
     * @param cantidad Cantidad del Movimiento
     * @param saldoDisponible Saldo Disponible de la Tarjeta
     * @return Devuelve null si el pago es válido en caso contrario devuelve
     * el String del error.
     */
    private String validarPago(String concepto, String cantidad, double saldoDisponible) {
        String errorMessage = null;
        boolean validPago = true;

        if (concepto.isBlank()) { // Si no ha escrito nada en el concepto le mostramos el aviso
            errorMessage = "El concepto no puede estar vacio.";
            validPago = false;
        }
        if (concepto.length() > 50) { // Si el concepto es superior a 50 caracteres le mostramos el aviso
            errorMessage = "El concepto no puede ser mayor de 50 caracteres.";
            validPago = false;
        }
        if (validPago && cantidad.isEmpty()) { // Si no ha escrito cantidad le avisamos
            errorMessage = "La cantidad debe de ser un valor numérico";
            validPago = false;
        }

        if (validPago && Double.parseDouble(cantidad) <= 0) { // Si ha insertado la cantidad negativa le informamos
            errorMessage = "La cantidad no puede ser negativa o 0";
            validPago = false;
        }
        if (validPago && Double.parseDouble(cantidad) > saldoDisponible) { // Si ha insertado una cantidad superior a la cantidad disponible le informamos
            errorMessage = "La cantidad supera el límite mensual";
        }

        return errorMessage;
    }

    /**
     * Método para comprobar si existe alguna tarjeta seleccionada
     * @return Devolverá True si existe una tarjeta seleccionada en caso contrario devolverá false
     */
    private boolean validarSiExisteTarjetaSeleccionada() {
        boolean isUnaTarjetaSeleccionada = true;
        int[] indices = jtListaTarjetasCredito.getSelectedRows();
        if (tarjetaSeleccionada == null) { // Si no ha seleccionado una tarjeta
            JOptionPane.showMessageDialog(this, "No has seleccionado ninguna Tarjeta", "Error", JOptionPane.WARNING_MESSAGE);
            isUnaTarjetaSeleccionada = false;
        } else if (indices.length > 1) { // Si ha seleccionado más de una tarjeta
            JOptionPane.showMessageDialog(this, "Has seleccionado mas de una Tarjeta \n Por favor selecciona solo una tarjeta", "Error", JOptionPane.WARNING_MESSAGE);
            isUnaTarjetaSeleccionada = false;
        }
        return isUnaTarjetaSeleccionada;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFInterfazJDBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFInterfazJDBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFInterfazJDBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFInterfazJDBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFInterfazJDBC().setVisible(true);
            }
        });
    }

    private TarjetaCreditoDAO conexionTarjetaCreditoDAO;
    private ModeloListaMovimientos modeloMovimientos;
    private ModeloListaTarjetasCredito modeloTarjetasCredito;
    private ArrayList<TarjetaCredito> listaTarjetas;
    private TarjetaCredito tarjetaSeleccionada;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbAñadirTarjeta;
    private javax.swing.JButton jbEliminarTarjetaSeleccionada;
    private javax.swing.JButton jbModificarPIN;
    private javax.swing.JButton jbRealizarPago;
    private javax.swing.JLabel jlEstadoSeleccion;
    private javax.swing.JLabel jlFechaCaducidad;
    private javax.swing.JLabel jlGastosTotales;
    private javax.swing.JLabel jlNIF;
    private javax.swing.JLabel jlNumeroTarjeta;
    private javax.swing.JLabel jlTitular;
    private javax.swing.JLabel jlTituloFechaCaducidad;
    private javax.swing.JLabel jlTituloFechaCaducidad1;
    private javax.swing.JLabel jlTituloGastosTotales;
    private javax.swing.JLabel jlTituloNumeroTarjeta;
    private javax.swing.JLabel jlTituloTarjetaSeleccionada;
    private javax.swing.JLabel jlTituloTitular;
    private javax.swing.JMenu jmAcciones;
    private javax.swing.JMenu jmCrear;
    private javax.swing.JMenuBar jmbMenu;
    private javax.swing.JMenuItem jmiAñadirTarjeta;
    private javax.swing.JMenuItem jmiEliminarTarjeta;
    private javax.swing.JMenuItem jmiModificarPIN;
    private javax.swing.JMenuItem jmiPopupEliminarMultiplesTarjetas;
    private javax.swing.JMenuItem jmiPopupEliminarTarjeta;
    private javax.swing.JMenuItem jmiPopupModificarPIN;
    private javax.swing.JMenuItem jmiPopupRealizarPago;
    private javax.swing.JMenuItem jmiRealizarPago;
    private javax.swing.JPanel jpInformacion;
    private javax.swing.JPanel jpMovimientos;
    private javax.swing.JPopupMenu jpmEliminarMultiplesTarjetas;
    private javax.swing.JPopupMenu jpmOpcionTarjeta;
    private javax.swing.JTable jtListaMovimientos;
    private javax.swing.JTable jtListaTarjetasCredito;
    private javax.swing.JTabbedPane jtpTarjetaSeleccionada;
    // End of variables declaration//GEN-END:variables
}
